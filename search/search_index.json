{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI. \u0426\u0435\u043b\u0438 \u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u044b\u0431\u043e\u0440 \u0442\u0435\u043c\u044b \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1-2.3 \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"#_1","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"#1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"#_2","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.","title":"\u0426\u0435\u043b\u0438"},{"location":"#_3","text":"\u0412\u044b\u0431\u043e\u0440 \u0442\u0435\u043c\u044b \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1-2.3 \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438.","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"1_tema/","text":"\u0422\u0435\u043c\u0430 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432 : \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.). \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447 : \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438. \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445","title":"\u0422\u0435\u043c\u0430"},{"location":"1_tema/#_1","text":"","title":"\u0422\u0435\u043c\u0430"},{"location":"1_tema/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432 : \u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u043e\u0432. \u0425\u0430\u043a\u0430\u0442\u043e\u043d - \u044d\u0442\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b, \u0434\u0438\u0437\u0430\u0439\u043d\u0435\u0440\u044b \u0438 \u0431\u0438\u0437\u043d\u0435\u0441-\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438 \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0440\u0435\u0448\u0430\u044f \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044f \u043d\u043e\u0432\u044b\u0435 \u0438\u0434\u0435\u0438. \u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0445\u0430\u043a\u0430\u0442\u043e\u043d, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0438\u043c\u044f, \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u043a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0442. \u0434.). \u041f\u043e\u0441\u043b\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432. \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0438\u043b\u0438 \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0442\u044c\u0441\u044f \u043a \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c. \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 (\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0434\u0438\u0437\u0430\u0439\u043d, \u043c\u0430\u0440\u043a\u0435\u0442\u0438\u043d\u0433 \u0438 \u0442. \u0434.). \u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044f \u0437\u0430\u0434\u0430\u0447 : \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u044b, \u043d\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438. \u041a\u0430\u0436\u0434\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0430\u0431\u043e\u0442 : \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u043e\u0442\u043e\u0442\u0438\u043f\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"1_tema/#_3","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"2_model/","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (Enum): \u041f\u043e\u043b (Gender): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. male - \u041c\u0443\u0436\u0441\u043a\u043e\u0439 female - \u0416\u0435\u043d\u0441\u043a\u0438\u0439 \u0420\u043e\u043b\u044c (Role): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430, \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438 \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440\u0430. admin - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 participant - \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a examiner - \u042d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440 \u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (RequestStatus): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u044f\u0442\u043e, \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e, \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u043e \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043e. pending - \u0412 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0438 accepted - \u041f\u0440\u0438\u043d\u044f\u0442 rejected - \u041e\u0442\u043a\u043b\u043e\u043d\u0451\u043d cancelled - \u041e\u0442\u043c\u0435\u043d\u0451\u043d created - \u0421\u043e\u0437\u0434\u0430\u043d \u041a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u043c (SkillUserLink): \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u043c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438. skill_id - ID \u043d\u0430\u0432\u044b\u043a\u0430 user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0427\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 (MemberShip): \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. team_id - ID \u043a\u043e\u043c\u0430\u043d\u0434\u044b user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f request_status - \u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 request_message - \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u041d\u0430\u0432\u044b\u043a (Skill): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0432\u044b\u043a\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 description - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 users - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043d\u0430\u0432\u044b\u043a\u043e\u043c \u041a\u043e\u043c\u0430\u043d\u0434\u0430 (Team): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 creation_date - \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f users - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0432 \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 solutions - \u0420\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (User): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c id - ID name - \u0418\u043c\u044f username - \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u041f\u0430\u0440\u043e\u043b\u044c email - \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430 telephone - \u0422\u0435\u043b\u0435\u0444\u043e\u043d registration_date - \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 status - \u0421\u0442\u0430\u0442\u0443\u0441 role - \u0420\u043e\u043b\u044c gender - \u041f\u043e\u043b skills - \u041d\u0430\u0432\u044b\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c teams - \u041a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0417\u0430\u0434\u0430\u0447\u0430 (Task): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 description - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 requirements - \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f evaluation_criteria - \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 publish_date - \u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 solutions - \u0420\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 (Solution): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432. id - ID content - \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 submission_date - \u0414\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 team_id - ID \u043a\u043e\u043c\u0430\u043d\u0434\u044b task_id - ID \u0437\u0430\u0434\u0430\u0447\u0438 team - \u041a\u043e\u043c\u0430\u043d\u0434\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c task - \u0417\u0430\u0434\u0430\u0447\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (Comment): \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c. id - ID content - \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 creation_date - \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f solution_id - ID \u0440\u0435\u0448\u0435\u043d\u0438\u044f user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c solution - \u0420\u0435\u0448\u0435\u043d\u0438\u0435, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c \u041a\u043e\u0434: from typing import Optional, List from email_validator import EmailNotValidError from sqlmodel import SQLModel, Field, Relationship from datetime import datetime, time, timedelta from enum import Enum from pydantic import EmailStr, field_validator, validate_email class Gender(Enum): male = \"male\" female = \"female\" class Role(Enum) : admin = \"admin\" participant = \"participant\" examiner = \"examiner\" class TokenSchema(SQLModel): access_token: str refresh_token: str class TokenPayload(SQLModel): sub: int = None exp: int = None class UserInput(SQLModel): username: str password: str class RequestStatus(Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" cancelled = \"cancelled\" created = \"created\" class SkillUserLink(SQLModel, table=True): skill_id: Optional[int] = Field( default=None, foreign_key=\"skill.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) class MemberShip(SQLModel, table=True) : team_id: Optional[int] = Field( default=None, foreign_key=\"team.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) request_status: Optional[str] = Field(default=RequestStatus.pending) request_message: Optional[str] = None class SkillDefault(SQLModel): name: str description: Optional[str] = \"\" class Skill(SkillDefault, table=True): id: int = Field(default=None, primary_key=True) users: Optional[List[\"User\"]] = Relationship( back_populates=\"skills\", link_model=SkillUserLink) class ChangePasswordRequest(SQLModel): old_password: str new_password: str class TeamCreateRequest(SQLModel): name: str user_id: int class TeamDefault(SQLModel) : name : str creation_date : datetime = datetime.now() class Team(TeamDefault,table = True) : id: int = Field(default=None, primary_key=True) users: Optional[List[\"User\"]] = Relationship( back_populates=\"teams\", link_model=MemberShip) solutions : Optional[List[\"Solution\"]] = Relationship(back_populates=\"team\") class UserDefault(SQLModel) : name: str username : str password : str email: str telephone : str registration_date : datetime = datetime.now() status: Optional[bool] = Field(default=False) role: Role = Field(default=Role.participant) gender : Gender @field_validator(\"email\") @classmethod def validate_email(cls, value): try: validate_email(value) except EmailNotValidError: raise ValueError(\"Invalid email format\") return value class User(UserDefault,table=True): id: int = Field(default=None, primary_key=True) skills: Optional[List[Skill]] = Relationship( back_populates=\"users\", link_model=SkillUserLink) teams : Optional[List[Team]] = Relationship( back_populates=\"users\", link_model=MemberShip) comments: Optional[List[\"Comment\"]] = Relationship(back_populates=\"user\") class TaskCreateRequest(SQLModel): user_id: int name : str description : str requirements : str evaluation_criteria : str publish_date : datetime = datetime.now() class TaskDefault(SQLModel) : name : str description : str requirements : str evaluation_criteria : str publish_date : datetime = datetime.now() class Task(TaskDefault,table = True) : id: int = Field(default=None, primary_key=True) solutions : Optional[List[\"Solution\"]] = Relationship(back_populates=\"task\") class SolutionDefault(SQLModel) : content : Optional[str] submission_date : datetime = datetime.now() team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") class Solution(SolutionDefault,table = True) : id: int = Field(default=None, primary_key=True) team: Optional[Team] = Relationship(back_populates=\"solutions\") task : Optional[Task] = Relationship(back_populates=\"solutions\") comments: Optional[List[\"Comment\"]] = Relationship(back_populates=\"solution\") class CommentDefault(SQLModel) : content : Optional[str] creation_date : datetime = datetime.now() solution_id: Optional[int] = Field(default=None, foreign_key=\"solution.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class Comment(CommentDefault, table = True) : id: int = Field(default=None, primary_key=True) user: Optional[User] = Relationship(back_populates=\"comments\") solution : Optional[Solution] = Relationship(back_populates=\"comments\") class TeamData(TeamDefault) : users: Optional[List[\"User\"]] = None solutions : Optional[List[\"Solution\"]] = None class UserData(UserDefault) : skills: Optional[List[Skill]] = None teams : Optional[List[Team]] = None class SolutionData(SolutionDefault) : team: Optional[Team] = None task : Optional[Task] = None class TaskData(TaskDefault) : solutions : Optional[List[\"Solution\"]] = None","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"2_model/#_1","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"2_model/#enum","text":"","title":"\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f (Enum):"},{"location":"2_model/#gender","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435. male - \u041c\u0443\u0436\u0441\u043a\u043e\u0439 female - \u0416\u0435\u043d\u0441\u043a\u0438\u0439","title":"\u041f\u043e\u043b (Gender):"},{"location":"2_model/#role","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430, \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0438 \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440\u0430. admin - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 participant - \u0423\u0447\u0430\u0441\u0442\u043d\u0438\u043a examiner - \u042d\u043a\u0437\u0430\u043c\u0435\u043d\u0430\u0442\u043e\u0440","title":"\u0420\u043e\u043b\u044c (Role):"},{"location":"2_model/#requeststatus","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435, \u043f\u0440\u0438\u043d\u044f\u0442\u043e, \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u043e, \u043e\u0442\u043c\u0435\u043d\u0435\u043d\u043e \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u043e. pending - \u0412 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0438 accepted - \u041f\u0440\u0438\u043d\u044f\u0442 rejected - \u041e\u0442\u043a\u043b\u043e\u043d\u0451\u043d cancelled - \u041e\u0442\u043c\u0435\u043d\u0451\u043d created - \u0421\u043e\u0437\u0434\u0430\u043d","title":"\u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (RequestStatus):"},{"location":"2_model/#_2","text":"","title":"\u041a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0434\u0435\u043b\u0435\u0439:"},{"location":"2_model/#skilluserlink","text":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u043c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044f\u043c\u0438. skill_id - ID \u043d\u0430\u0432\u044b\u043a\u0430 user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"\u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438 \u043d\u0430\u0432\u044b\u043a\u043e\u043c (SkillUserLink):"},{"location":"2_model/#membership","text":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. team_id - ID \u043a\u043e\u043c\u0430\u043d\u0434\u044b user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f request_status - \u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 request_message - \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","title":"\u0427\u043b\u0435\u043d\u0441\u0442\u0432\u043e \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 (MemberShip):"},{"location":"2_model/#skill","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0432\u044b\u043a\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 description - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 users - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043d\u0430\u0432\u044b\u043a\u043e\u043c","title":"\u041d\u0430\u0432\u044b\u043a (Skill):"},{"location":"2_model/#team","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 creation_date - \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f users - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0432 \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 solutions - \u0420\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 (Team):"},{"location":"2_model/#user","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0432\u044b\u043a\u043e\u0432 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c id - ID name - \u0418\u043c\u044f username - \u0418\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f password - \u041f\u0430\u0440\u043e\u043b\u044c email - \u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430 telephone - \u0422\u0435\u043b\u0435\u0444\u043e\u043d registration_date - \u0414\u0430\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 status - \u0421\u0442\u0430\u0442\u0443\u0441 role - \u0420\u043e\u043b\u044c gender - \u041f\u043e\u043b skills - \u041d\u0430\u0432\u044b\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c teams - \u041a\u043e\u043c\u0430\u043d\u0434\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u044d\u0442\u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (User):"},{"location":"2_model/#task","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u0434\u0430\u0447\u0435 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. id - ID name - \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 description - \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 requirements - \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f evaluation_criteria - \u041a\u0440\u0438\u0442\u0435\u0440\u0438\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 publish_date - \u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 solutions - \u0420\u0435\u0448\u0435\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\u0439","title":"\u0417\u0430\u0434\u0430\u0447\u0430 (Task):"},{"location":"2_model/#solution","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0438 \u0437\u0430\u0434\u0430\u0447\u0443, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432. id - ID content - \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 submission_date - \u0414\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 team_id - ID \u043a\u043e\u043c\u0430\u043d\u0434\u044b task_id - ID \u0437\u0430\u0434\u0430\u0447\u0438 team - \u041a\u043e\u043c\u0430\u043d\u0434\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c task - \u0417\u0430\u0434\u0430\u0447\u0430, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0441 \u044d\u0442\u0438\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 (Solution):"},{"location":"2_model/#comment","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c. id - ID content - \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 creation_date - \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f solution_id - ID \u0440\u0435\u0448\u0435\u043d\u0438\u044f user_id - ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f user - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c solution - \u0420\u0435\u0448\u0435\u043d\u0438\u0435, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0435 \u0441 \u044d\u0442\u0438\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u043c","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 (Comment):"},{"location":"2_model/#_3","text":"from typing import Optional, List from email_validator import EmailNotValidError from sqlmodel import SQLModel, Field, Relationship from datetime import datetime, time, timedelta from enum import Enum from pydantic import EmailStr, field_validator, validate_email class Gender(Enum): male = \"male\" female = \"female\" class Role(Enum) : admin = \"admin\" participant = \"participant\" examiner = \"examiner\" class TokenSchema(SQLModel): access_token: str refresh_token: str class TokenPayload(SQLModel): sub: int = None exp: int = None class UserInput(SQLModel): username: str password: str class RequestStatus(Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" cancelled = \"cancelled\" created = \"created\" class SkillUserLink(SQLModel, table=True): skill_id: Optional[int] = Field( default=None, foreign_key=\"skill.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) class MemberShip(SQLModel, table=True) : team_id: Optional[int] = Field( default=None, foreign_key=\"team.id\", primary_key=True ) user_id: Optional[int] = Field( default=None, foreign_key=\"user.id\", primary_key=True ) request_status: Optional[str] = Field(default=RequestStatus.pending) request_message: Optional[str] = None class SkillDefault(SQLModel): name: str description: Optional[str] = \"\" class Skill(SkillDefault, table=True): id: int = Field(default=None, primary_key=True) users: Optional[List[\"User\"]] = Relationship( back_populates=\"skills\", link_model=SkillUserLink) class ChangePasswordRequest(SQLModel): old_password: str new_password: str class TeamCreateRequest(SQLModel): name: str user_id: int class TeamDefault(SQLModel) : name : str creation_date : datetime = datetime.now() class Team(TeamDefault,table = True) : id: int = Field(default=None, primary_key=True) users: Optional[List[\"User\"]] = Relationship( back_populates=\"teams\", link_model=MemberShip) solutions : Optional[List[\"Solution\"]] = Relationship(back_populates=\"team\") class UserDefault(SQLModel) : name: str username : str password : str email: str telephone : str registration_date : datetime = datetime.now() status: Optional[bool] = Field(default=False) role: Role = Field(default=Role.participant) gender : Gender @field_validator(\"email\") @classmethod def validate_email(cls, value): try: validate_email(value) except EmailNotValidError: raise ValueError(\"Invalid email format\") return value class User(UserDefault,table=True): id: int = Field(default=None, primary_key=True) skills: Optional[List[Skill]] = Relationship( back_populates=\"users\", link_model=SkillUserLink) teams : Optional[List[Team]] = Relationship( back_populates=\"users\", link_model=MemberShip) comments: Optional[List[\"Comment\"]] = Relationship(back_populates=\"user\") class TaskCreateRequest(SQLModel): user_id: int name : str description : str requirements : str evaluation_criteria : str publish_date : datetime = datetime.now() class TaskDefault(SQLModel) : name : str description : str requirements : str evaluation_criteria : str publish_date : datetime = datetime.now() class Task(TaskDefault,table = True) : id: int = Field(default=None, primary_key=True) solutions : Optional[List[\"Solution\"]] = Relationship(back_populates=\"task\") class SolutionDefault(SQLModel) : content : Optional[str] submission_date : datetime = datetime.now() team_id: Optional[int] = Field(default=None, foreign_key=\"team.id\") task_id: Optional[int] = Field(default=None, foreign_key=\"task.id\") class Solution(SolutionDefault,table = True) : id: int = Field(default=None, primary_key=True) team: Optional[Team] = Relationship(back_populates=\"solutions\") task : Optional[Task] = Relationship(back_populates=\"solutions\") comments: Optional[List[\"Comment\"]] = Relationship(back_populates=\"solution\") class CommentDefault(SQLModel) : content : Optional[str] creation_date : datetime = datetime.now() solution_id: Optional[int] = Field(default=None, foreign_key=\"solution.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class Comment(CommentDefault, table = True) : id: int = Field(default=None, primary_key=True) user: Optional[User] = Relationship(back_populates=\"comments\") solution : Optional[Solution] = Relationship(back_populates=\"comments\") class TeamData(TeamDefault) : users: Optional[List[\"User\"]] = None solutions : Optional[List[\"Solution\"]] = None class UserData(UserDefault) : skills: Optional[List[Skill]] = None teams : Optional[List[Team]] = None class SolutionData(SolutionDefault) : team: Optional[Team] = None task : Optional[Task] = None class TaskData(TaskDefault) : solutions : Optional[List[\"Solution\"]] = None","title":"\u041a\u043e\u0434:"},{"location":"3_API/","text":"API \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f (auth) \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041c\u0435\u0442\u043e\u0434: POST URL : /signup \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user: \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f username \u0438 \u043f\u0430\u0440\u043e\u043b\u044c. \u0412\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /login \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ( username ) \u0438 \u043f\u0430\u0440\u043e\u043b\u044c ( password ). \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: PUT URL: /change-password \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: data : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0442\u0430\u0440\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c ( old_password ) \u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c ( new_password ). current_user : \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c auth_handler.get_current_user() . \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0432\u043e\u0448\u0435\u0434\u0448\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. \u041c\u0435\u0442\u043e\u0434: GET URL: /me \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user : \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c auth_handler.get_current_user() . \u041a\u043e\u0434: from fastapi import Depends, HTTPException, APIRouter, status from auth.auth_handler import AuthHandler from db import get_session from models import UserDefault,User, TokenSchema, UserInput,ChangePasswordRequest from typing import TypedDict router = APIRouter() auth_handler = AuthHandler() @router.post('/signup', summary=\"Create new user\") async def create_user(user: UserDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int,\"data\": User}): # type: ignore try: user_tmp = session.query(User).filter(User.email == user.email).first() if user_tmp is None: user.password = auth_handler.get_password_hash(user.password) user = User.model_validate(user) session.add(user) session.commit() session.refresh(user) return {\"status\": 200, \"data\": user} else : raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"User with this email already exist\") except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e)) @router.post('/login', summary=\"Create access and refresh tokens for user\") async def login(user: UserInput, session=Depends(get_session)) -> TokenSchema: try: user_db = session.query(User).filter(User.username == user.username).first() if user_db is None: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect email or password\" ) verified = auth_handler.verify_password(user.password, user_db.password) if not verified: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect email or password\" ) return { \"access_token\": auth_handler.access_token(user_db.username), \"refresh_token\": auth_handler.refresh_token(user_db.username), } except Exception as e: raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e) ) @router.put(\"/change-password\", summary=\"Change user password\") async def change_password(data: ChangePasswordRequest, current_user: User = Depends(auth_handler.get_current_user), session= Depends(get_session)): try: user_db = session.query(User).filter(User.username == current_user.username).first() if user_db is None: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"User not found\" ) verified = auth_handler.verify_password(data.old_password, user_db.password) if not verified: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect mail or password\" ) user_db.password = auth_handler.get_password_hash(data.new_password) session.commit() return {\"message\": \"Password changed successfully\"} except Exception as e: raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e) ) @router.get('/me', summary='Get details of currently logged in user') def get_current_user(user: User = Depends(auth_handler.get_current_user)) -> User: return user \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (user) \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0430\u0432\u044b\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u041c\u0435\u0442\u043e\u0434: POST URL: /set_skill_for_users/ \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041c\u0435\u0442\u043e\u0434: GET URL: /users \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /users/{user_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /users/{user_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. participant : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u041a\u043e\u0434: from fastapi import Depends, HTTPException, APIRouter, status from fastapi.security import OAuth2PasswordRequestForm from db import get_session from models import Skill, SkillUserLink, UserDefault,User, UserData from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/set_skill_for_users/\") def set_skill_for_users(skill_id: int, user_id: int, session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill is None: raise HTTPException(status_code=404, detail=\"Skill not found\") user = session.query(User).filter(User.id == user_id).first() if user is None: raise HTTPException(status_code=404, detail=\"User not found\") skill_user_link = SkillUserLink(skill_id=skill_id, user_id=user_id) session.add(skill_user_link) session.commit() return {\"status\": 200, \"message\": \"Skill assigned to user successfully.\"} except Exception as e: session.rollback() raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/users\") def get_all_users(session=Depends(get_session)) -> List[UserData]: try: query = select(User) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/users/{user_id}\") def delete_participant(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: user = session.get(User, user_id) if user: session.delete(user) session.commit() return {\"status\": 200, \"message\": f\"Participant with ID {user_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Participant with ID {user_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/users/{user_id}\") def update_participant(user_id: int, participant: UserDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_participant = session.get(User, user_id) if db_participant: participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return {\"message\": f\"Participant with ID {user_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Participant with ID {user_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) \u041d\u0430\u0432\u044b\u043a\u0438 (Skill) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0432\u044b\u043a\u0430. \u041c\u0435\u0442\u043e\u0434: POST URL: /skills \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043d\u0430\u0432\u044b\u043a\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432. \u041c\u0435\u0442\u043e\u0434: GET URL: /skills \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e ID API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. skill : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0432\u044b\u043a\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. \u041a\u043e\u0434: from fastapi import Depends, HTTPException, APIRouter from sqlalchemy.orm import Session from typing import List, TypedDict from db import get_session from models import Skill, SkillDefault from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/skills\") def create_skill(skill: SkillDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: skill = Skill.model_validate(skill) session.add(skill) session.commit() session.refresh(skill) return {\"status\": 200, \"message\": f\"Skill has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/skills\") def get_all_skills(session=Depends(get_session)) -> List[Skill]: try: skills = session.query(Skill).all() return skills except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/skills/{skill_id}\") def get_skill(skill_id: int, session=Depends(get_session)) -> Skill: try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill: return skill else: raise HTTPException(status_code=404, detail=f\"Skill with ID {skill_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/skills/{skill_id}\") def update_skill(skill_id: int, skill: SkillDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_skill = session.query(Skill).filter(Skill.id == skill_id).first() if db_skill: skill_data = skill.model_dump(exclude_unset=True) for key, value in skill_data.items(): setattr(db_skill, key, value) session.commit() session.refresh(db_skill) return db_skill else: return {\"status\": 200, \"message\": f\"Skill with ID {skill_id} has been updated successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/skills/{skill_id}\") def delete_skill(skill_id: int, session=Depends(get_session)): try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill: session.delete(skill) session.commit() return {\"message\": f\"Skill with ID {skill_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Skill with ID {skill_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) \u041a\u043e\u043c\u0430\u043d\u0434\u0430 (Team) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u041c\u0435\u0442\u043e\u0434: POST URL: /teams \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u041c\u0435\u0442\u043e\u0434: GET URL: /teams \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /teams/{team_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. team : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e \u0435\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /teams/{team_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041c\u0435\u0442\u043e\u0434: POST URL: /memberships \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: membership : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0435 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041a\u043e\u0434: from fastapi import APIRouter, Depends, HTTPException from db import get_session from models import Team, TeamDefault, MemberShip,TeamCreateRequest,User,TeamData from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/teams\") def create_team(team: TeamCreateRequest,session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: user_id = team.user_id team = Team.model_validate(TeamDefault(name=team.name)) if team: session.add(team) session.commit() session.refresh(team) membership = MemberShip(team_id=team.id, user_id=user_id, request_status=\"created\") session.add(membership) session.commit() session.refresh(membership) return {\"status\": 200, \"message\": f\"Participant with ID {user_id} has successfully created a team.\"} except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e)) @router.get(\"/teams\") def get_all_teams(session=Depends(get_session)) -> List[TeamData]: try: query = select(Team) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/teams/{team_id}\") def update_team(team_id: int, team: TeamDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_team = session.get(Team, team_id) if db_team: team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return {\"message\": f\"Team with ID {team_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Team with ID {team_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/teams/{team_id}\") def delete_team(team_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: team = session.get(Team, team_id) if team: session.delete(team) session.commit() return {\"status\": 200, \"message\": f\"Team with ID {team_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Team with ID {team_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.post(\"/memberships\") def join_team(membership: MemberShip, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, membership.user_id) if not participant: raise HTTPException(status_code=404, detail=f\"Participant with id {membership.user_id} not found\") team = session.get(Team, membership.team_id) if not team: raise HTTPException(status_code=404, detail=f\"Team with id {membership.team_id} not found\") membership = MemberShip.model_validate(membership) session.add(membership) session.commit() session.refresh(membership) return {\"status\": 200, \"message\": f\"Participant with ID {membership.user_id} has successfully sent invitation to join team with ID {membership.team_id}.\"} except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e)) \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /solutions \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u041c\u0435\u0442\u043e\u0434: GET URL: /solutions \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e ID API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. solution : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u041a\u043e\u0434: from fastapi import Depends, HTTPException, APIRouter from db import get_session from models import Solution, SolutionDefault,SolutionData from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/solutions\") def create_solution(solution: SolutionDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: solution = Solution.model_validate(solution) session.add(solution) session.commit() session.refresh(solution) return {\"status\": 200, \"message\": f\"Solution of the team with ID {solution.team_id} has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/solutions\") def get_all_solutions(session=Depends(get_session)) -> List[SolutionData]: try: solutions = session.query(Solution).all() return solutions except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/solutions/{solution_id}\") def get_solution(solution_id: int, session=Depends(get_session)) -> SolutionData: # type: ignore try: solution = session.get(Solution, solution_id) if solution: return solution else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/solutions/{solution_id}\") def update_solution(solution_id: int, solution: SolutionDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_solution = session.get(Solution, solution_id) if db_solution: solution_data = solution.model_dump(exclude_unset=True) for key, value in solution_data.items(): setattr(db_solution, key, value) session.add(db_solution) session.commit() session.refresh(db_solution) return {\"status\": 200, \"message\": f\"Solution with ID {solution_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/solutions/{solution_id}\") def delete_solution(solution_id: int, session=Depends(get_session)): try: solution = session.get(Solution, solution_id) if solution: session.delete(solution) session.commit() return {\"message\": f\"Solution with ID {solution_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) \u0417\u0430\u0434\u0430\u0447\u0430 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041c\u0435\u0442\u043e\u0434: POST URL: /tasks \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u0437\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0443. task : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447. \u041c\u0435\u0442\u043e\u0434: GET URL: /tasks \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0435\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /tasks/{task_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: task_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /tasks/{task_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: task_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438. task : \u041e\u0431\u044a\u0435\u043a\u0442 \u041a\u043e\u0434: from fastapi import Depends, HTTPException,APIRouter from db import get_session from models import User, Role, Task, TaskDefault from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/tasks\") def create_task(user_id: int, task: TaskDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User,user_id) if participant.role == Role.admin : task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"message\": \"Task created successfully.\"} else: raise HTTPException(status_code=403, detail=\"Only admins can create tasks.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/tasks\") def get_all_tasks(session=Depends(get_session)) -> List[Task] : try: query = select(Task) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/tasks/{task_id}\") def delete_task(task_id: int, user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, user_id) if not participant or participant.role != Role.admin: raise HTTPException(status_code=403, detail=\"Only admins can delete tasks.\") db_task = session.get(Task, task_id) if db_task: session.delete(db_task) session.commit() return {\"status\": 200, \"message\": f\"Task with ID {task_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Task with ID {task_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/tasks/{task_id}\") def update_task(task_id: int,user_id: int, task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, user_id) if not participant or participant.role != Role.admin: raise HTTPException(status_code=403, detail=\"Only admins can update tasks.\") db_task = session.get(Task, task_id) if db_task: task = task.model_dump(exclude_unset=True) for key, value in task.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return {\"status\": 200, \"message\": f\"Task with ID {task_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Task with ID {task_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /comments \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432. \u041c\u0435\u0442\u043e\u0434: GET URL: /comments \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e ID API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. comment : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041a\u043e\u0434: from fastapi import Depends, HTTPException, APIRouter from sqlalchemy.orm import Session from typing import List, TypedDict from db import get_session from models import Comment, CommentDefault from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/comments\") def create_comment(comment: CommentDefault, session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: comment = Comment.model_validate(comment) session.add(comment) session.commit() session.refresh(comment) return {\"status\": 200, \"message\": \"Comment has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/comments\") def get_all_comments(session= Depends(get_session)) -> List[Comment]: try: comments = session.query(Comment).all() return comments except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/comments/{comment_id}\", response_model=Comment) def get_comment(comment_id: int, session = Depends(get_session)): try: comment = session.query(Comment).filter(Comment.id == comment_id).first() if comment: return comment else: raise HTTPException(status_code=404, detail=f\"Comment with ID {comment_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/comments/{comment_id}\") def update_comment(comment_id: int, comment: CommentDefault, session: Session = Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_comment = session.query(Comment).filter(Comment.id == comment_id).first() if db_comment: comment_data = comment.model_dump(exclude_unset=True) for key, value in comment_data.items(): setattr(db_comment, key, value) session.commit() session.refresh(db_comment) return db_comment else: raise {\"status\": 200, \"message\": f\"Comment with ID {skill_id} has been updated successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/comments/{comment_id}\") def delete_comment(comment_id: int, session: Session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: comment = session.query(Comment).filter(Comment.id == comment_id).first() if comment: session.delete(comment) session.commit() return {\"status\": 200, \"message\": f\"Comment with ID {comment_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Comment with ID {comment_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"API"},{"location":"3_API/#api","text":"","title":"API"},{"location":"3_API/#auth","text":"","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f (auth)"},{"location":"3_API/#_1","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u041c\u0435\u0442\u043e\u0434: POST URL : /signup \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user: \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f username \u0438 \u043f\u0430\u0440\u043e\u043b\u044c.","title":"\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f"},{"location":"3_API/#_2","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /login \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ( username ) \u0438 \u043f\u0430\u0440\u043e\u043b\u044c ( password ).","title":"\u0412\u0445\u043e\u0434 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443"},{"location":"3_API/#_3","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: PUT URL: /change-password \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: data : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0442\u0430\u0440\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c ( old_password ) \u0438 \u043d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c ( new_password ). current_user : \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c auth_handler.get_current_user() .","title":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"3_API/#_4","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u0432\u043e\u0448\u0435\u0434\u0448\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. \u041c\u0435\u0442\u043e\u0434: GET URL: /me \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user : \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c auth_handler.get_current_user() .","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"3_API/#_5","text":"from fastapi import Depends, HTTPException, APIRouter, status from auth.auth_handler import AuthHandler from db import get_session from models import UserDefault,User, TokenSchema, UserInput,ChangePasswordRequest from typing import TypedDict router = APIRouter() auth_handler = AuthHandler() @router.post('/signup', summary=\"Create new user\") async def create_user(user: UserDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int,\"data\": User}): # type: ignore try: user_tmp = session.query(User).filter(User.email == user.email).first() if user_tmp is None: user.password = auth_handler.get_password_hash(user.password) user = User.model_validate(user) session.add(user) session.commit() session.refresh(user) return {\"status\": 200, \"data\": user} else : raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=\"User with this email already exist\") except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e)) @router.post('/login', summary=\"Create access and refresh tokens for user\") async def login(user: UserInput, session=Depends(get_session)) -> TokenSchema: try: user_db = session.query(User).filter(User.username == user.username).first() if user_db is None: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect email or password\" ) verified = auth_handler.verify_password(user.password, user_db.password) if not verified: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect email or password\" ) return { \"access_token\": auth_handler.access_token(user_db.username), \"refresh_token\": auth_handler.refresh_token(user_db.username), } except Exception as e: raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e) ) @router.put(\"/change-password\", summary=\"Change user password\") async def change_password(data: ChangePasswordRequest, current_user: User = Depends(auth_handler.get_current_user), session= Depends(get_session)): try: user_db = session.query(User).filter(User.username == current_user.username).first() if user_db is None: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"User not found\" ) verified = auth_handler.verify_password(data.old_password, user_db.password) if not verified: raise HTTPException( status_code=status.HTTP_400_BAD_REQUEST, detail=\"Incorrect mail or password\" ) user_db.password = auth_handler.get_password_hash(data.new_password) session.commit() return {\"message\": \"Password changed successfully\"} except Exception as e: raise HTTPException( status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e) ) @router.get('/me', summary='Get details of currently logged in user') def get_current_user(user: User = Depends(auth_handler.get_current_user)) -> User: return user","title":"\u041a\u043e\u0434:"},{"location":"3_API/#user","text":"","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (user)"},{"location":"3_API/#_6","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e. \u041c\u0435\u0442\u043e\u0434: POST URL: /set_skill_for_users/ \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0430\u0432\u044b\u043a\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"3_API/#_7","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041c\u0435\u0442\u043e\u0434: GET URL: /users","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"3_API/#_8","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /users/{user_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"3_API/#_9","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /users/{user_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. participant : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"3_API/#_10","text":"from fastapi import Depends, HTTPException, APIRouter, status from fastapi.security import OAuth2PasswordRequestForm from db import get_session from models import Skill, SkillUserLink, UserDefault,User, UserData from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/set_skill_for_users/\") def set_skill_for_users(skill_id: int, user_id: int, session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill is None: raise HTTPException(status_code=404, detail=\"Skill not found\") user = session.query(User).filter(User.id == user_id).first() if user is None: raise HTTPException(status_code=404, detail=\"User not found\") skill_user_link = SkillUserLink(skill_id=skill_id, user_id=user_id) session.add(skill_user_link) session.commit() return {\"status\": 200, \"message\": \"Skill assigned to user successfully.\"} except Exception as e: session.rollback() raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/users\") def get_all_users(session=Depends(get_session)) -> List[UserData]: try: query = select(User) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/users/{user_id}\") def delete_participant(user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: user = session.get(User, user_id) if user: session.delete(user) session.commit() return {\"status\": 200, \"message\": f\"Participant with ID {user_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Participant with ID {user_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/users/{user_id}\") def update_participant(user_id: int, participant: UserDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_participant = session.get(User, user_id) if db_participant: participant_data = participant.model_dump(exclude_unset=True) for key, value in participant_data.items(): setattr(db_participant, key, value) session.add(db_participant) session.commit() session.refresh(db_participant) return {\"message\": f\"Participant with ID {user_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Participant with ID {user_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"\u041a\u043e\u0434:"},{"location":"3_API/#skill","text":"","title":"\u041d\u0430\u0432\u044b\u043a\u0438 (Skill)"},{"location":"3_API/#_11","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043d\u0430\u0432\u044b\u043a\u0430. \u041c\u0435\u0442\u043e\u0434: POST URL: /skills \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043d\u0430\u0432\u044b\u043a\u0435.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430"},{"location":"3_API/#_12","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432. \u041c\u0435\u0442\u043e\u0434: GET URL: /skills","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043d\u0430\u0432\u044b\u043a\u043e\u0432"},{"location":"3_API/#id","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430.","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e ID"},{"location":"3_API/#_13","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430. skill : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0432\u044b\u043a\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043d\u0430\u0432\u044b\u043a\u0435"},{"location":"3_API/#_14","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u0432\u044b\u043a\u0430 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /skills/{skill_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: skill_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043d\u0430\u0432\u044b\u043a\u0430.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0430"},{"location":"3_API/#_15","text":"from fastapi import Depends, HTTPException, APIRouter from sqlalchemy.orm import Session from typing import List, TypedDict from db import get_session from models import Skill, SkillDefault from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/skills\") def create_skill(skill: SkillDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: skill = Skill.model_validate(skill) session.add(skill) session.commit() session.refresh(skill) return {\"status\": 200, \"message\": f\"Skill has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/skills\") def get_all_skills(session=Depends(get_session)) -> List[Skill]: try: skills = session.query(Skill).all() return skills except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/skills/{skill_id}\") def get_skill(skill_id: int, session=Depends(get_session)) -> Skill: try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill: return skill else: raise HTTPException(status_code=404, detail=f\"Skill with ID {skill_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/skills/{skill_id}\") def update_skill(skill_id: int, skill: SkillDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_skill = session.query(Skill).filter(Skill.id == skill_id).first() if db_skill: skill_data = skill.model_dump(exclude_unset=True) for key, value in skill_data.items(): setattr(db_skill, key, value) session.commit() session.refresh(db_skill) return db_skill else: return {\"status\": 200, \"message\": f\"Skill with ID {skill_id} has been updated successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/skills/{skill_id}\") def delete_skill(skill_id: int, session=Depends(get_session)): try: skill = session.query(Skill).filter(Skill.id == skill_id).first() if skill: session.delete(skill) session.commit() return {\"message\": f\"Skill with ID {skill_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Skill with ID {skill_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"\u041a\u043e\u0434:"},{"location":"3_API/#team","text":"","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u0430 (Team)"},{"location":"3_API/#_16","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u041c\u0435\u0442\u043e\u0434: POST URL: /teams \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b"},{"location":"3_API/#_17","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434. \u041c\u0435\u0442\u043e\u0434: GET URL: /teams","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u0430\u043d\u0434"},{"location":"3_API/#_18","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /teams/{team_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b. team : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u0430\u043d\u0434\u0435"},{"location":"3_API/#_19","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043f\u043e \u0435\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /teams/{team_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: team_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u0430\u043d\u0434\u044b.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b"},{"location":"3_API/#_20","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435. \u041c\u0435\u0442\u043e\u0434: POST URL: /memberships \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: membership : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0435 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435.","title":"\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043a \u043a\u043e\u043c\u0430\u043d\u0434\u0435"},{"location":"3_API/#_21","text":"from fastapi import APIRouter, Depends, HTTPException from db import get_session from models import Team, TeamDefault, MemberShip,TeamCreateRequest,User,TeamData from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/teams\") def create_team(team: TeamCreateRequest,session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: user_id = team.user_id team = Team.model_validate(TeamDefault(name=team.name)) if team: session.add(team) session.commit() session.refresh(team) membership = MemberShip(team_id=team.id, user_id=user_id, request_status=\"created\") session.add(membership) session.commit() session.refresh(membership) return {\"status\": 200, \"message\": f\"Participant with ID {user_id} has successfully created a team.\"} except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e)) @router.get(\"/teams\") def get_all_teams(session=Depends(get_session)) -> List[TeamData]: try: query = select(Team) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/teams/{team_id}\") def update_team(team_id: int, team: TeamDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_team = session.get(Team, team_id) if db_team: team_data = team.model_dump(exclude_unset=True) for key, value in team_data.items(): setattr(db_team, key, value) session.add(db_team) session.commit() session.refresh(db_team) return {\"message\": f\"Team with ID {team_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Team with ID {team_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/teams/{team_id}\") def delete_team(team_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: team = session.get(Team, team_id) if team: session.delete(team) session.commit() return {\"status\": 200, \"message\": f\"Team with ID {team_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Team with ID {team_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.post(\"/memberships\") def join_team(membership: MemberShip, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, membership.user_id) if not participant: raise HTTPException(status_code=404, detail=f\"Participant with id {membership.user_id} not found\") team = session.get(Team, membership.team_id) if not team: raise HTTPException(status_code=404, detail=f\"Team with id {membership.team_id} not found\") membership = MemberShip.model_validate(membership) session.add(membership) session.commit() session.refresh(membership) return {\"status\": 200, \"message\": f\"Participant with ID {membership.user_id} has successfully sent invitation to join team with ID {membership.team_id}.\"} except Exception as e: session.rollback() raise HTTPException(status_code=400, detail=str(e))","title":"\u041a\u043e\u0434:"},{"location":"3_API/#_22","text":"","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"3_API/#_23","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /solutions \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"3_API/#_24","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439. \u041c\u0435\u0442\u043e\u0434: GET URL: /solutions","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439"},{"location":"3_API/#id_1","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e ID"},{"location":"3_API/#_25","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f. solution : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f.","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0438"},{"location":"3_API/#_26","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /solutions/{solution_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: solution_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f"},{"location":"3_API/#_27","text":"from fastapi import Depends, HTTPException, APIRouter from db import get_session from models import Solution, SolutionDefault,SolutionData from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/solutions\") def create_solution(solution: SolutionDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: solution = Solution.model_validate(solution) session.add(solution) session.commit() session.refresh(solution) return {\"status\": 200, \"message\": f\"Solution of the team with ID {solution.team_id} has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/solutions\") def get_all_solutions(session=Depends(get_session)) -> List[SolutionData]: try: solutions = session.query(Solution).all() return solutions except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/solutions/{solution_id}\") def get_solution(solution_id: int, session=Depends(get_session)) -> SolutionData: # type: ignore try: solution = session.get(Solution, solution_id) if solution: return solution else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/solutions/{solution_id}\") def update_solution(solution_id: int, solution: SolutionDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_solution = session.get(Solution, solution_id) if db_solution: solution_data = solution.model_dump(exclude_unset=True) for key, value in solution_data.items(): setattr(db_solution, key, value) session.add(db_solution) session.commit() session.refresh(db_solution) return {\"status\": 200, \"message\": f\"Solution with ID {solution_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/solutions/{solution_id}\") def delete_solution(solution_id: int, session=Depends(get_session)): try: solution = session.get(Solution, solution_id) if solution: session.delete(solution) session.commit() return {\"message\": f\"Solution with ID {solution_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Solution with ID {solution_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"\u041a\u043e\u0434:"},{"location":"3_API/#_28","text":"","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"3_API/#_29","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438. \u041c\u0435\u0442\u043e\u0434: POST URL: /tasks \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: user_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0441\u043e\u0437\u0434\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u0434\u0430\u0447\u0443. task : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"3_API/#_30","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447. \u041c\u0435\u0442\u043e\u0434: GET URL: /tasks","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447"},{"location":"3_API/#_31","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u043e \u0435\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /tasks/{task_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: task_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"},{"location":"3_API/#_32","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /tasks/{task_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: task_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438. task : \u041e\u0431\u044a\u0435\u043a\u0442","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0434\u0430\u0447\u0435"},{"location":"3_API/#_33","text":"from fastapi import Depends, HTTPException,APIRouter from db import get_session from models import User, Role, Task, TaskDefault from sqlmodel import select from typing import List, TypedDict from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/tasks\") def create_task(user_id: int, task: TaskDefault, session=Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User,user_id) if participant.role == Role.admin : task = Task.model_validate(task) session.add(task) session.commit() session.refresh(task) return {\"status\": 200, \"message\": \"Task created successfully.\"} else: raise HTTPException(status_code=403, detail=\"Only admins can create tasks.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/tasks\") def get_all_tasks(session=Depends(get_session)) -> List[Task] : try: query = select(Task) return session.exec(query).all() except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/tasks/{task_id}\") def delete_task(task_id: int, user_id: int, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, user_id) if not participant or participant.role != Role.admin: raise HTTPException(status_code=403, detail=\"Only admins can delete tasks.\") db_task = session.get(Task, task_id) if db_task: session.delete(db_task) session.commit() return {\"status\": 200, \"message\": f\"Task with ID {task_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Task with ID {task_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/tasks/{task_id}\") def update_task(task_id: int,user_id: int, task: TaskDefault, session=Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: participant = session.get(User, user_id) if not participant or participant.role != Role.admin: raise HTTPException(status_code=403, detail=\"Only admins can update tasks.\") db_task = session.get(Task, task_id) if db_task: task = task.model_dump(exclude_unset=True) for key, value in task.items(): setattr(db_task, key, value) session.add(db_task) session.commit() session.refresh(db_task) return {\"status\": 200, \"message\": f\"Task with ID {task_id} has been updated successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Task with ID {task_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"\u041a\u043e\u0434:"},{"location":"3_API/#_34","text":"","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439"},{"location":"3_API/#_35","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. \u041c\u0435\u0442\u043e\u0434: POST URL: /comments \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u043c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438.","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"3_API/#_36","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432. \u041c\u0435\u0442\u043e\u0434: GET URL: /comments","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432"},{"location":"3_API/#id_2","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: GET URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f.","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e ID"},{"location":"3_API/#_37","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438. \u041c\u0435\u0442\u043e\u0434: PATCH URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f. comment : \u041e\u0431\u044a\u0435\u043a\u0442, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438.","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438"},{"location":"3_API/#_38","text":"API, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. \u041c\u0435\u0442\u043e\u0434: DELETE URL: /comments/{comment_id} \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430: comment_id : \u0426\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f.","title":"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"3_API/#_39","text":"from fastapi import Depends, HTTPException, APIRouter from sqlalchemy.orm import Session from typing import List, TypedDict from db import get_session from models import Comment, CommentDefault from auth.auth_handler import AuthHandler auth_handler = AuthHandler() router = APIRouter(dependencies=[Depends(auth_handler.get_current_user)],) @router.post(\"/comments\") def create_comment(comment: CommentDefault, session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: comment = Comment.model_validate(comment) session.add(comment) session.commit() session.refresh(comment) return {\"status\": 200, \"message\": \"Comment has been created successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/comments\") def get_all_comments(session= Depends(get_session)) -> List[Comment]: try: comments = session.query(Comment).all() return comments except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.get(\"/comments/{comment_id}\", response_model=Comment) def get_comment(comment_id: int, session = Depends(get_session)): try: comment = session.query(Comment).filter(Comment.id == comment_id).first() if comment: return comment else: raise HTTPException(status_code=404, detail=f\"Comment with ID {comment_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.patch(\"/comments/{comment_id}\") def update_comment(comment_id: int, comment: CommentDefault, session: Session = Depends(get_session))-> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: db_comment = session.query(Comment).filter(Comment.id == comment_id).first() if db_comment: comment_data = comment.model_dump(exclude_unset=True) for key, value in comment_data.items(): setattr(db_comment, key, value) session.commit() session.refresh(db_comment) return db_comment else: raise {\"status\": 200, \"message\": f\"Comment with ID {skill_id} has been updated successfully.\"} except Exception as e: raise HTTPException(status_code=500, detail=str(e)) @router.delete(\"/comments/{comment_id}\") def delete_comment(comment_id: int, session: Session = Depends(get_session)) -> TypedDict('Response', {\"status\": int, \"message\": str}): # type: ignore try: comment = session.query(Comment).filter(Comment.id == comment_id).first() if comment: session.delete(comment) session.commit() return {\"status\": 200, \"message\": f\"Comment with ID {comment_id} has been deleted successfully.\"} else: raise HTTPException(status_code=404, detail=f\"Comment with ID {comment_id} not found.\") except Exception as e: raise HTTPException(status_code=500, detail=str(e))","title":"\u041a\u043e\u0434:"}]}